STEP for issue_tracker:

1) setup venv
    -so it is easier to keep track of packages installed
2) install django, django-rest-framework
3) install django-cors-headers
    -security
    -api and backend security
4)install djoser
    -authentication, users, token api/endpoints
5)install pillow
    -pip install pillow == 6.2.2
6)install stripe
7)django: wsgi/asgi are entry points for web server
          settings.py global configuration for whole project
8) django:settings.py:
    add to INSTALLED_APPS:
    [
        'rest_framework',
        'rest_framework.authtoken',
        'corsheaders',
        'djoser',
    ]
9) configure corsheaders:
    add to settings.py after INSTALLED_APPS, this is address to frontend,later change to live server address:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:8080",
    ]
10) change MIDDLEWARE(backend of django):
    add to MIDDLEWARE:
        'corsheaders.middleware.CorsMiddleware',
11) modify urls.py:
        add:
            path('api/v1/',include('djoser.urls')),
            path('api/v1/',include('djoser.urls.authtoken')),
        -you can add users, authentication
12) makemigrations
13)vue:
    -public/index.html is file we serve
    -main.js creates vue app
    -APP.vue is wrapper around the code.
    -views are different pages
    -store is vuex which global state manangement
    -router is similar to urls.py in django
    -components reusable parts of code
    -assests images,etc.
14) add font awesome for icons
15) App.vue template requrie one element
16) django create an app called 'project'
    -after creation we need to add it to the list called INSTALLED_APPS
17)create the folder called templates:
    -with folder named same as app itself i.e folder 'project'
18) django: naming path makes it easier to reference it.
19) bulma.css: class=navbar-end menu is going to be on another end
20) datetimefield vs timefield in models.
21) why do we need app_label in class Meta?
22) import axios in main js
    -then we add base url:
        axios.defaults.baseURL = 'http://127.0.0.1:8000'
    - this allows to use api without explicitly typing out api everytime
23)get by id in APIView/serializer:
    try:
        Project.objects.get(id=id)
    except Project.DoesNotExist:
24) set up vuex:
    -used in authentication
25)vuex:store:
    -state: variables, information,
    -mutations: changing the variables(state)
    -actions: asynchronous function to mutate state? Actions commit mutations. Actions are called by components
        to request mutations of state, which otherwise unaccessible by components
    -create 
        isAuthenticated:false,
        token:'',
        this is used for an authenticaton & using tokens.
    -add isLoading to vuex:state
26) initialize store, so we can store data in localStorage of browser.
27) create a submit form with @submit.prevent 
    -to prevent default action of submitting to server
28)**Sign up errors/toast
29) initialize store in beforeCreate lifecycle hook.
30)in beforeCreate you check if you have token or not, which you use to set 'Authorization' in axios
31)How to send user with api request? Do I send token, then in backend it finds user in database?

32)When updating pass the position in the list, not project.id
33)this.$router.push("/projects/")//TODO:push works here, but not in case of delete
    this.$router.go('')
34) when updating ticket, separate update ticket page is not required, just call through axios
35)Do I require csrf token?
36)Serializer(required=false,allow_null=true):
    when post/put if dont provide project object or it is null these flags are required:
        required=false// project is not required
        allow_null=true// allows to pass null through serializer.save()

37) In order to pass data from parent to component we use:
            props
    from component to parent:
            this.$emit('clicked',value)
<style scoped>
.drop-zone {
  background-color: #eee;
  margin-bottom: 10px;
  padding: 10px;
}

.drag-el {
  /* background-color: #fff;
  margin-bottom: 10px;
  padding: 5px; */
}
</style>



      <div
        class="column has-background-primary-light mx-5"
        :style="{ height: '600px' }"
        @drop="onDrop($event, 'Done')"
        @dragover.prevent
        @dragenter.prevent
        draggable="false"
      >
        Done
        <div class="drop-zone" draggable="false">
          <div class="drag-el" v-for="ticket in list_done" :key="ticket.id">
            <ticketBoxVue
              :ticket="ticket"
              draggable="true"
              @dragstart="startDrag($event, ticket)"
              @clicked="clickedEmit(ticket.id)"
            />
          </div>
        </div>
      </div>


38) Drag and drop event in different files transfer information through event.
39) In props we need to define data type passed from parent.
40) Probably, it is required to override create() to deal with nested serializers.
41) To use djoser endpoints it is required to modify settings.py